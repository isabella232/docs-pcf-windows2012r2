---
title: Deploying .NET Apps to Windows Cells 
owner: Greenhouse
---

<strong><%= modified_date %></strong>

This topic describes how to push .NET apps to Windows cells. 

After operators have installed and configured the Pivotal Cloud Foundry (PCF) Runtime for Windows v1.9 tile, developers can push .NET apps to the Windows cell. For more information on installing the PCF Runtime for Windows v1.9 tile, see [Deploying PCF Runtime for Windows](deploy-windows.html).

Developers can push both [OWIN](http://owin.org/) and non-OWIN apps, and can push apps that are served by [Hostable Web Core](#push) or [self-hosted](#self-hosted). 

For how to develop .NET apps to run on PCF Runtime for Windows see the [.NET Cookbook](https://dotnet-cookbook.cfapps.io/intro/). For how to develop .NET microservices for .NET apps using Steeltoe, see the [Steeltoe documentation](http://steeltoe.io/docs/).

##<a id='push'></a> Push a .NET App

By default, PCF serves .NET apps with Hostable Web Core, which is a lighter version of the Internet Information Services (IIS) server that contains the core IIS functionality.

Perform the following steps to push a .NET app to a Windows cell:

1. Target the Cloud Controller of your PCF deployment:
	<pre class="terminal">
	$ cf api api.YOUR-SYSTEM-DOMAIN
	</pre>

1. Push your .NET app, replacing `APP-NAME` with the name of your app:

	<pre class="terminal">
	$ cf push APP-NAME -s windows2012R2 -b binary_buildpack
	</pre>

	Push your app from a directory containing either a `.exe` binary or a valid `Web.config` file for .NET apps. Alternatively, add the `-p` flag to your `cf push` command and specify the path to the directory that contains the `.exe` or `Web.config` file.<br><br>

	The push command must include the following flags:
	* You specify the stack as `windows2012R2` to instruct PCF to run the app in the Windows cell. 
	* You specify the buildpack as `binary_buildpack` to expedite the staging process, because the binary buildpack is lightweight. Garden Windows does not use the binary buildpack to stage your app. 

1. Wait for your app to stage and start. If an error occurs, see the [Troubleshoot App Errors](#troubleshoot) section.

##<a id='self-hosted'></a> Push a Self-Hosted App

Developers can choose to push a self-hosted app instead of using Hostable Web Core. Self-hosted apps combine the server code with the app code. 

Perform the following steps to push a self-hosted app:

1. Target the Cloud Controller of your PCF deployment:
	<pre class="terminal">
	$ cf api api.YOUR-SYSTEM-DOMAIN
	</pre>

1. Push your .NET app from the app root, replacing `APP-NAME` with the name of your app and `PATH-TO-BINARY` with the path to your executable.

	<pre class="terminal">
	$ cf push APP-NAME -s windows2012R2 -b binary_buildpack -c PATH-TO-BINARY
	</pre>

1. Wait for your app to stage and start. If an error occurs, see the [Troubleshoot App Errors](#troubleshoot) section.

##<a id='soap'></a> Push a SOAP Service

Developers can push Simple Object Access Protocol (SOAP) web services to their PCF deployment by following the procedures in the sections below.

###<a id='push-soap'></a> Step 1: Deploy Your Web Service

Perform the following steps to deploy a SOAP web service:

1. Develop the service as an ASMX web service in Microsoft Visual Studio.
1. Publish the service to your local file system.
1. Push your service from the directory containing the published web service, replacing `SERVICE-NAME` with the name of your service:
	<pre class="terminal">
	$ cf push SERVICE-NAME -s windows2012R2 -b binary_buildpack -u none
	</pre>
	<br>
	The push command must include the following flags:
	* You specify the stack as `windows2012R2` to instruct PCF to run the app in the Windows cell. 
	* You specify the buildpack as `binary_buildpack` to expedite the staging process, because the binary buildpack is lightweight. Garden Windows does not use the binary buildpack to stage your app. 
	<br><br>
	The push command can include the following optional flags:
	* If you are not pushing your service from the directory containing the published web service, add the `-p` flag to your `cf push` command and specify the path to the directory that contains the published web service. 
	* If you do not have a route serving `/`, add the `-u none` flag to disable the health check.
	<br><br>

1. If the push command is successful, locate the portion of the output that displays the URL of the web service:

	```
	requested state: started
	instances: 1/1
	usage: 1G x 1 instances
	urls: YOUR-WEB-SERVICE.YOUR-DOMAIN
	last uploaded: Thu Nov 17 19:18:19 UTC 2016
	stack: windows2012R2
	buildpack: binary_buildpack
	```

###<a id='correct-wsdl'></a> Step 2: Modify the WSDL File

Your SOAP web service is now deployed on PCF, but the service's WSDL file contains the incorrect port information. Before an application can consume your web service, either you or the application developer must modify the WSDL file.

See the following portion of an example WSDL file:

```
- <wsdl:service name="WebService1">
  - <wsdl:port name="WebService1Soap" binding="tns:WebService1Soap">
      <soap:address location="http://webservice.example.com:62492/WebService1.asmx"/>
    </wsdl:port>
  - <wsdl:port name="WebService1Soap12" binding="tns:WebService1Soap12">
      <soap12:address location="http://webservice.example.com:62492/WebService1.asmx"/>
    </wsdl:port>
- </wsdl:service>
```

The WSDL file provides the port number for the SOAP web service as 62492. This is the port that the web service listens on in the [Garden container](../concepts/container-security.html#mechanics), but external applications cannot access the service on this port. Instead, external applications must use port 80, and the [Gorouter](../concepts/architecture/router.html) will route the request to the web service in the container. 

The URL of the web service in the WSDL file must be modified to remove `62492`. With no port number, the URL defaults to port 80. In the example above, the modified URL would be `http://webservice.example.com/WebService1.asmx`.

SOAP web service developers can resolve this problem in one of two ways:

1. Modify the WSDL file by following the instructions in [Modify a Web Serviceâ€™s WSDL Using a SoapExtensionReflector](https://blogs.msdn.microsoft.com/kaevans/2005/11/16/modify-a-web-services-wsdl-using-a-soapextensionreflector/) from the Microsoft Developers Network.

1. Instruct the developers of external applications that consume the web service to perform the steps in the [section](#consume) below.

####<a id='consume'></a>Consume the SOAP Web Service

Developers of external applications that consume the SOAP web service can perform the following steps to use a modified version of the WSDL file:

1. In a browser, navigate to the WSDL file of the web service. 
	<br><br>
	You can reach the WSDL of your web service by constructing the URL as follows: 
		
	`YOUR-WEB-SERVICE.YOUR-DOMAIN/ASMX-FILE.asmx?wsdl`
	<br><br>
	See the following URL as an example:
	`https://webservice.example.com/WebService1.asmx?wsdl`

1. Download the WSDL file to your local machine.
1. Edit the WSDL file to eliminate the container port, as described [above](#correct-wsdl).
1. In Microsoft Visual Studio, right-click on your application in the **Solution Explorer** and select **Add** and then **Service Reference**.
1. Under **Address**, enter the local path to the modified WSDL file. For example, `C:\Users\example\wsdl.xml`.
1. Click **OK**. Microsoft Visual Studio generates a client from the WSDL file that you can use in your codebase.

##<a id='troubleshoot'></a> Troubleshoot App Errors

If a .NET app fails to start, consult the following list of errors and their possible solutions:

* `NoCompatibleCell`: Your PCF deployment cannot connect to your Windows cell. Operators should see the [Troubleshooting Windows Cells](windows-troubleshooting.html) topic for information about how to troubleshoot their Windows cell configuration.

* `Start unsuccessful`: Your app may not contain the required DLL files and dependencies. Ensure that you are pushing from a directory containing your app dependencies, or specifying the directory with the `-p` flag. Your app also may be misconfigured. Ensure that your app directory contains either a valid `.exe` binary or a valid `Web.config` file. 