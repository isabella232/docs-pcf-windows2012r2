---
title: Using PAS for Windows 2012R2
owner: Diego
---

<strong><%= modified_date %></strong>

<p class='note'><strong>Note:</strong> Elastic Runtime has been renamed Pivotal Application Service. Runtime for Windows has been renamed Pivotal Application Service for Windows 2012R2.</p>

<p class='note'><strong>Note:</strong> PAS for Windows 2012R2 is provided for compatibility with Windows Server 2012 R2 only. For Pivotal's fully featured .NET / Windows product, see <a hrf="../windows/indx.html">Pivotal Application Service for Windows</a>. If you require using Windows Server 2012R2, see the <a hrf="">Limitations</a> section of this topic.</p>

## <a id='overview'></a>Overview

Pivotal Application Service for Windows 2012R2 enables PCF to host full .NET Framework and Windows-based applications, using Windows Server 2012R2 and the IronFrame containerization framework. For Windows Server 2016 support, see [Pivotal Application Service for Windows](../windows/index.html).

By deploying the PAS for Windows 2012R2 tile in the Ops Manager Installation Dashboard, operators can provision, operate, and manage Diego cells based on Windows Server 2012R2. Once deployed, developers can then push .NET Framework applications to Windows [Diego cells](../concepts/architecture/index.html#diego-cell) using the [Cloud Foundry Command Line Interface](https://docs.pivotal.io/pivotalcf/cf-cli/) (cf CLI) and specifying the `windows2012R2` stack.

Operators can install PAS for Windows 2012R2 on Microsoft Azure, VMware vSphere, Amazon Web Services (AWS), or Google Cloud Platform (GCP).

For the PAS for Windows release notes, see the [PAS for Windows 2012R2 v2.1 Release Notes](https://docs.pivotal.io/pivotalcf/pcf-release-notes/windows-2012r2-rn.html) topic.

## <a id='requirements'></a> Requirements

To install the PAS for Windows 2012R2 tile, you must have:

* Any patch version of Ops Manager v2.1, deployed to vSphere, Amazon Web Services (AWS), Google Cloud Platform (GCP), or Microsoft Azure.

* Any patch version of Pivotal Application Service (PAS) v2.1.

* A Windows Server 2012R2 stemcell, which you can obtain by following the directions in [Using Windows Stemcells](./about-windows-stemcells.html). By design, PAS for Windows 2012R2 only supports deployments based on Windows Server 2012 R2.

The minimum recommended resource requirements for each Windows cell are the following:

- Disk size: 64GB
- Memory: 16GB
- Number of CPUs: 4

Due to Microsoftâ€™s licensing requirements, operators must use their own licensed copies of Windows Server for on-premise deployments (vSphere) or, for public IaaS deployments, pay the surcharges associated with Windows Server licensing determined by the public IaaS provider on Microsoft Azure, Amazon Web Services, and Google Cloud Platform.


## <a id='understand'></a>Understanding PAS for Windows 2012R2 ##

* <a href="understand-windows.html" class="subnav">Understanding Windows Cells</a>

* <a href="windows-security.html" class="subnav">Understanding Stemcell Security</a>

## <a id='install'></a>Installation Guide ##

* <a href="./about-windows-stemcells.html">Using Windows Stemcells</a>

* <a href="./deploy-windows.html" class="subnav">Deploying PAS for Windows 2012R2</a>

## <a id="admin"></a>Admin Guide

* <a href="./upgrade-windows.html" class="subnav">Upgrading Windows Cells</a>

* <a href="./windows-troubleshooting.html" class="subnav">Troubleshooting Windows Cells</a>

## <a id='dev'></a>Developer Guide

* <a href="push-windows-apps.html" class="subnav">Deploying .NET Framework Apps to Windows Cells</a>


## <a id='limitations'></a>Limitations

Deployments of Windows Diego Cells with PAS for Windows 2012R2 have the following limitations:

* Because of the process management characteristics of Windows Server 2012R2, Windows cells can host a maximum of 40 app instances per cell. Operators should take this density constraint into account when planning the sizes of their PAS for Windows 2012R2 deployments, in addition to CPU, disk, and memory needs.

* The following Cloud Foundry features are not supported by PAS for Windows 2012R2:

  - Diego SSH, i.e. the `cf ssh` command. This is due to limitations of the inherent file system isolation characteristics of Windows Server 2012R2.
  - Volume services. For mounting SMB shares, developers should access SMB volumes from their applications directly.
  - Container-to-container networking. The IronFrame library that provides container-like features on Windows Server 2012R2 does not support container networking. IronFrame binds virtual container ports to the host.
  - Pushing Docker or other OCI-compatible container images.

* The following Windows technologies are not supported by PAS for Windows 2012R2:

  - Active Directory Domain Services, i.e. joining Windows cells to an Active Directory domain.
  - Integrated Windows Authentication. Instead, operators should deploy Active Directory Federation Services and the Pivotal SSO tile to enable OAuth-based authentication.

Pivotal recommends you use [Pivotal Application Service for Windows](../windows/index.html), which has fewer limitations and will continue to receive additional platform features.

## <a id='issues'></a>Known Issues

PAS for Windows 2012R2 has the following known issues:

* In the PAS for Windows 2012R2 tile **Credentials** tab, the `vcap` credentials that appear when you click **VM Credentials** > **Link to Credential** do not apply to Windows cells, since they do not yet have a vcap user on the host. To establish access for an `Administrator` user, please see the **VM Options** tab to specify a password for that user.

* Under **VM Options** > **Manage Administrator Password** > **Set the password**, the password must be 8-14 characters and is limited to letters, numbers, and the `!` character, which is the only working special character.

* The controls in the **Advanced Features** pane have no effect.

* In the **Resource Config** pane, setting VM disk sizes has the following limitations. See the [Root Disk Sizing](./about-windows-stemcells.html#sizing) table for details.

* When a PAS for Windows 2012R2 container shuts down, it may leave behind ghost connections and pending transactions that put the app in an inconsistent state. This is due to a known limitation of the IronFrame containerization framework. See the [Container Shutdown](./understand-windows.html#container-shutdown) section for details.
